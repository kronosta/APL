‡ - U+2021 - Sub Array
    ⍵ should be the array to take elements from
    ⍺ should be a 2-row matrix with ≢ ⍴⍵ columns
        row 1 should be 1-based indexes to start
        row 2 should be the shape of the sub-array
    Returns a subarray of ⍵ according to ⍺

    This is a separate operator because I'm confused on what the ⌷ operator in dzaima/APL actually does.

◫ - U+25EB - Fun Value
    Notes:
        - "operator operators" are just functions returning operator values, and potentially taking them as arguments.
          The following text will describe what an "operator value" is.
    Monadic:
        Takes a character array and evaluates it, much like Eval, except that it must evaluate to
        a function, monadic operator, or dyadic operator.

        It will return the callable in a protected form known as a
        "function value", "monadic operator value", or "dyadic operator value" (collectively "callable values").

        Callable values are not directly usable as functions or operators, rather the dyadic form of Fun Value
        must be used to call and manipulate them.

        This can be used to create closures, as the following example shows:
        Code:
            addnum←{addend←⍵ ⋄ ◫'{⍵+addend}'}
            ⎕←add20←addnum 20
            ⎕←add3←addnum 3
            ⎕←3◫(⊂add20),⊂1 2 3 4 5
            ⎕←3◫(⊂add3),⊂1 2 3 4 5
            ⎕←3◫(⊂2◫(⊂◫'⍣'),(⊂add20),⊂3),⊂1 2 3 4 5
        Output:
            ◫{⍵ + addend}
            ◫{⍵ + addend}
            21 22 23 24 25
            4 5 6 7 8
            61 62 63 64 65
        The closure will be performed on execution, but functions with a closed-over variable,
        when printed, will just display the variable's original name.
        This also works with defined operators, making this a good way to define custom operator operators.

    Dyadic:
        The left argument should be an integer (n). The right argument should be a vector of arguments depending
        on the value of n. It is recommended to enclose each argument, like 5◫(⊂o),(⊂◫'{⍵-1}'),⊂1 for example
        (notice the ⊂'s).

        (Indexes are 1-based)
        n=1:
            ⍵[1]: a monadic operator value
            ⍵[2]: a function value or other value as an argument to ⍵[1]

            Returns a new function value formed from applying the operator to the argument
        
        n=2:
            ⍵[1]: a dyadic operator value
            ⍵[2] and ⍵[3]: left and right arguments to ⍵[1]

            Returns a new function value formed from applying the operator to the arguments

        n=3:
            ⍵[1]: a function value
            ⍵[2]: an argument to ⍵[1]

            Returns the result of calling ⍵[1] on ⍵[2]

        n=4:
            ⍵[1]: a function value
            ⍵[2] and ⍵[3]: left and right arguments to ⍵[1]

            Returns the result of calling ⍵[1] on ⍵[2] and ⍵[3] (⍵[3] is the right argument)

        n=5:
            ⍵[1]: a dyadic operator value
            ⍵[2]: an argument to ⍵[2]
            ⍵[3]: must be a number, 0 if ⍵[2] is the right arguments, otherwise ⍵[2] will be the left argument

            Sort of like the "Bind" operator part of "Compose", but applied to operators

        n=6:
            ⍵[1] and ⍵[2]: monadic operator values

            Sort of like the "Beside" operator part of "Compose", but applied to operators.

        n=7:
            ⍵[1]: dyadic operator value

            Sort of like reduce, but applied to operators.

            Note that this won't work for ranks higher than 1.
            You could use an operator apply function with 1 (Fun Value), use the Each operator on it
            to apply the result of this operator operator to each element of an array, turn these into
            an operator using defined operators and monadic Fun Value, then apply this operator operator to that.

    
        I don't plan on adding a Power/Repeat operator operator, because the numeric right argument case
        can be done with the following function:
            {original←⍺ ⋄ ({6◫(⊂original),⊂⍵}⍣(⍵-1))⍺}
        and I don't think the function right argument (effectively a while loop) really makes sense
        because there wouldn't be any valid conditions to check against with just a function.

        Other operator operators I won't be adding can be done through closures:
        Each:
            {op←⍵ ⋄ ◫'{{1◫(⊂op),⊂⍵}¨⍶}'}

            Since operators returning arrays don't exist, the result of this operator operator
            (a monadic operator value) must be applied to an array of functions to produce
            a function that returns the result array regardless of its argument

            a.k.a. The result of an Each-ed operator must be applied to get the resulting
            function array.

        Inner Product (given two operators and two arrays of functions): 
            {left←⍺ ⋄ right←⍵ ⋄ ◫'{⍶({2◫left,⍺,⍵}.{2◫right,⍺,⍵})⍹}'}

            Same caveat as Each, you have to call the resulting function to obtain the result function array.

        And many more...

⎕STR:
    Monadic:
        Takes in any value and converts it into the same form used by output, as a character string.

⎕FILE:
    Dyadic:
        The left argument should be a string determining what to do. It is case insensitive, so you don't have to
        worry about matching the capitalization.

        'create':
            Right argument should be a path as a string.
            
            Creates a file with that path.
            Returns 0 if success, 1 if failure.

        'create directory':
            Right argument should be a path as a string.

            Creates a directory with that path, and also creates all necessary containing directories.
            Example: 'test/inside/further'
                will create 'test', 'test/inside', and 'test/inside/further'

            Returns 0 on success, 1 on failure.

        'delete':
            Right argument should be a path as a string.
            
            Deletes the file with that path.
            Returns 0.

        'read':
            Right argument should be a path as a string.
            
            Reads all bytes from the file and returns a numeric array of the bytes.

        'write' or 'append':
            Right argument should be a vector v with two enclosed elements.
            v[1] should be a path as a string.
            v[2] should be a vector of bytes

            Writes the bytes to the file. If the left argument is 'append', adds the bytes after everything already there.

        'read permissions':
            Right argument should be a path as a string.

            Returns a three element boolean vector v:
            v[1] is true if Java has permission to execute the file
            v[2] is true if Java has permission to read the file
            v[3] is true if Java has permission to write the file

            Not well tested, since it works a bit differently on Windows where I work.

        'write permissions':
            Right argument should be a vector v with two enclosed elements.
            v[1] should be a path as a string.
            v[2] should be a 6-element boolean vector

            v[1], v[3], and v[5] set the execute, read, and write permissions, respectively.
            v[2], v[4], and v[6] represent if the previous permission applies to the owner only. 

            Not well tested, since it works a bit differently on Windows where I work.

⎕OSI:
    A gettable value.

    A length-3 vector of nested character vectors:
        [1] - Operating system name as returned from System.getProperty("os.name") in Java
        [2] - Operating system version as returned from System.getProperty("os.version") in Java
        [3] - Operating system CPU architecture as returned from System.getProperty("os.arch") in Java
